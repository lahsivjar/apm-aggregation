// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by protoc-gen-go-hashpb. Do not edit.
// protoc-gen-go-hashpb v0.2.0
// Source: proto/aggregation.proto

package aggregationpb

import (
	hash "hash"
)

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *CombinedMetrics) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_CombinedMetrics_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *KeyedServiceMetrics) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_KeyedServiceMetrics_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *ServiceAggregationKey) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_ServiceAggregationKey_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *ServiceMetrics) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_ServiceMetrics_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *ServiceInstanceAggregationKey) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_ServiceInstanceAggregationKey_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *ServiceInstanceMetrics) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_ServiceInstanceMetrics_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *KeyedServiceInstanceMetrics) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_KeyedServiceInstanceMetrics_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *KeyedTransactionMetrics) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_KeyedTransactionMetrics_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *TransactionAggregationKey) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_TransactionAggregationKey_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *TransactionMetrics) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_TransactionMetrics_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *KeyedServiceTransactionMetrics) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_KeyedServiceTransactionMetrics_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *ServiceTransactionAggregationKey) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_ServiceTransactionAggregationKey_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *ServiceTransactionMetrics) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_ServiceTransactionMetrics_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *KeyedSpanMetrics) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_KeyedSpanMetrics_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *SpanAggregationKey) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_SpanAggregationKey_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *SpanMetrics) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_SpanMetrics_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *CountValue) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_CountValue_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *HDRHistogram) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_HDRHistogram_hashpb_sum(m, hasher, ignore)
	}
}

// HashPB computes a hash of the message using the given hash function
// The ignore set must contain fully-qualified field names (pkg.msg.field) that should be ignored from the hash
func (m *Overflow) HashPB(hasher hash.Hash, ignore map[string]struct{}) {
	if m != nil {
		elastic_apm_Overflow_hashpb_sum(m, hasher, ignore)
	}
}
