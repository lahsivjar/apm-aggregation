// Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
// or more contributor license agreements. Licensed under the Elastic License 2.0;
// you may not use this file except in compliance with the Elastic License 2.0.

// Code generated by protoc-gen-go-hashpb. Do not edit.
// protoc-gen-go-hashpb v0.2.0

package aggregationpb

import (
	hash "hash"
	math "math"

	protowire "google.golang.org/protobuf/encoding/protowire"
)

func elastic_apm_CombinedMetrics_hashpb_sum(m *CombinedMetrics, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.CombinedMetrics.service_metrics"]; !ok {
		if len(m.ServiceMetrics) > 0 {
			for _, v := range m.ServiceMetrics {
				if v != nil {
					elastic_apm_KeyedServiceMetrics_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["elastic.apm.CombinedMetrics.overflow_services"]; !ok {
		if m.OverflowServices != nil {
			elastic_apm_Overflow_hashpb_sum(m.OverflowServices, hasher, ignore)
		}

	}
	if _, ok := ignore["elastic.apm.CombinedMetrics.overflow_service_instances_estimator"]; !ok {
		_, _ = hasher.Write(protowire.AppendBytes(nil, m.OverflowServiceInstancesEstimator))

	}
	if _, ok := ignore["elastic.apm.CombinedMetrics.events_total"]; !ok {
		_, _ = hasher.Write(protowire.AppendFixed64(nil, math.Float64bits(m.EventsTotal)))

	}
	if _, ok := ignore["elastic.apm.CombinedMetrics.youngest_event_timestamp"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, m.YoungestEventTimestamp))

	}
}

func elastic_apm_CountValue_hashpb_sum(m *CountValue, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.CountValue.count"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Count)))

	}
	if _, ok := ignore["elastic.apm.CountValue.value"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.Value)))

	}
}

func elastic_apm_GlobalLabels_hashpb_sum(m *GlobalLabels, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.GlobalLabels.labels"]; !ok {
		if len(m.Labels) > 0 {
			for _, v := range m.Labels {
				if v != nil {
					elastic_apm_Label_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["elastic.apm.GlobalLabels.numeric_labels"]; !ok {
		if len(m.NumericLabels) > 0 {
			for _, v := range m.NumericLabels {
				if v != nil {
					elastic_apm_NumericLabel_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func elastic_apm_HDRHistogram_hashpb_sum(m *HDRHistogram, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.HDRHistogram.lowest_trackable_value"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.LowestTrackableValue)))

	}
	if _, ok := ignore["elastic.apm.HDRHistogram.highest_trackable_value"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.HighestTrackableValue)))

	}
	if _, ok := ignore["elastic.apm.HDRHistogram.significant_figures"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.SignificantFigures)))

	}
	if _, ok := ignore["elastic.apm.HDRHistogram.counts"]; !ok {
		if len(m.Counts) > 0 {
			for _, v := range m.Counts {
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(v)))

			}
		}
	}
	if _, ok := ignore["elastic.apm.HDRHistogram.buckets"]; !ok {
		if len(m.Buckets) > 0 {
			for _, v := range m.Buckets {
				_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(v)))

			}
		}
	}
}

func elastic_apm_KeyedServiceInstanceMetrics_hashpb_sum(m *KeyedServiceInstanceMetrics, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.KeyedServiceInstanceMetrics.key"]; !ok {
		if m.Key != nil {
			elastic_apm_ServiceInstanceAggregationKey_hashpb_sum(m.Key, hasher, ignore)
		}

	}
	if _, ok := ignore["elastic.apm.KeyedServiceInstanceMetrics.metrics"]; !ok {
		if m.Metrics != nil {
			elastic_apm_ServiceInstanceMetrics_hashpb_sum(m.Metrics, hasher, ignore)
		}

	}
}

func elastic_apm_KeyedServiceMetrics_hashpb_sum(m *KeyedServiceMetrics, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.KeyedServiceMetrics.key"]; !ok {
		if m.Key != nil {
			elastic_apm_ServiceAggregationKey_hashpb_sum(m.Key, hasher, ignore)
		}

	}
	if _, ok := ignore["elastic.apm.KeyedServiceMetrics.metrics"]; !ok {
		if m.Metrics != nil {
			elastic_apm_ServiceMetrics_hashpb_sum(m.Metrics, hasher, ignore)
		}

	}
}

func elastic_apm_KeyedServiceTransactionMetrics_hashpb_sum(m *KeyedServiceTransactionMetrics, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.KeyedServiceTransactionMetrics.key"]; !ok {
		if m.Key != nil {
			elastic_apm_ServiceTransactionAggregationKey_hashpb_sum(m.Key, hasher, ignore)
		}

	}
	if _, ok := ignore["elastic.apm.KeyedServiceTransactionMetrics.metrics"]; !ok {
		if m.Metrics != nil {
			elastic_apm_ServiceTransactionMetrics_hashpb_sum(m.Metrics, hasher, ignore)
		}

	}
}

func elastic_apm_KeyedSpanMetrics_hashpb_sum(m *KeyedSpanMetrics, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.KeyedSpanMetrics.key"]; !ok {
		if m.Key != nil {
			elastic_apm_SpanAggregationKey_hashpb_sum(m.Key, hasher, ignore)
		}

	}
	if _, ok := ignore["elastic.apm.KeyedSpanMetrics.metrics"]; !ok {
		if m.Metrics != nil {
			elastic_apm_SpanMetrics_hashpb_sum(m.Metrics, hasher, ignore)
		}

	}
}

func elastic_apm_KeyedTransactionMetrics_hashpb_sum(m *KeyedTransactionMetrics, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.KeyedTransactionMetrics.key"]; !ok {
		if m.Key != nil {
			elastic_apm_TransactionAggregationKey_hashpb_sum(m.Key, hasher, ignore)
		}

	}
	if _, ok := ignore["elastic.apm.KeyedTransactionMetrics.metrics"]; !ok {
		if m.Metrics != nil {
			elastic_apm_TransactionMetrics_hashpb_sum(m.Metrics, hasher, ignore)
		}

	}
}

func elastic_apm_Label_hashpb_sum(m *Label, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.Label.key"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Key))

	}
	if _, ok := ignore["elastic.apm.Label.value"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Value))

	}
	if _, ok := ignore["elastic.apm.Label.values"]; !ok {
		if len(m.Values) > 0 {
			for _, v := range m.Values {
				_, _ = hasher.Write(protowire.AppendString(nil, v))

			}
		}
	}
}

func elastic_apm_NumericLabel_hashpb_sum(m *NumericLabel, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.NumericLabel.key"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Key))

	}
	if _, ok := ignore["elastic.apm.NumericLabel.value"]; !ok {
		_, _ = hasher.Write(protowire.AppendFixed64(nil, math.Float64bits(m.Value)))

	}
	if _, ok := ignore["elastic.apm.NumericLabel.values"]; !ok {
		if len(m.Values) > 0 {
			for _, v := range m.Values {
				_, _ = hasher.Write(protowire.AppendFixed64(nil, math.Float64bits(v)))

			}
		}
	}
}

func elastic_apm_Overflow_hashpb_sum(m *Overflow, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.Overflow.overflow_transactions"]; !ok {
		if m.OverflowTransactions != nil {
			elastic_apm_TransactionMetrics_hashpb_sum(m.OverflowTransactions, hasher, ignore)
		}

	}
	if _, ok := ignore["elastic.apm.Overflow.overflow_service_transactions"]; !ok {
		if m.OverflowServiceTransactions != nil {
			elastic_apm_ServiceTransactionMetrics_hashpb_sum(m.OverflowServiceTransactions, hasher, ignore)
		}

	}
	if _, ok := ignore["elastic.apm.Overflow.overflow_spans"]; !ok {
		if m.OverflowSpans != nil {
			elastic_apm_SpanMetrics_hashpb_sum(m.OverflowSpans, hasher, ignore)
		}

	}
	if _, ok := ignore["elastic.apm.Overflow.overflow_transactions_estimator"]; !ok {
		_, _ = hasher.Write(protowire.AppendBytes(nil, m.OverflowTransactionsEstimator))

	}
	if _, ok := ignore["elastic.apm.Overflow.overflow_service_transactions_estimator"]; !ok {
		_, _ = hasher.Write(protowire.AppendBytes(nil, m.OverflowServiceTransactionsEstimator))

	}
	if _, ok := ignore["elastic.apm.Overflow.overflow_spans_estimator"]; !ok {
		_, _ = hasher.Write(protowire.AppendBytes(nil, m.OverflowSpansEstimator))

	}
}

func elastic_apm_ServiceAggregationKey_hashpb_sum(m *ServiceAggregationKey, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.ServiceAggregationKey.timestamp"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, m.Timestamp))

	}
	if _, ok := ignore["elastic.apm.ServiceAggregationKey.service_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ServiceName))

	}
	if _, ok := ignore["elastic.apm.ServiceAggregationKey.service_environment"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ServiceEnvironment))

	}
	if _, ok := ignore["elastic.apm.ServiceAggregationKey.service_language_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ServiceLanguageName))

	}
	if _, ok := ignore["elastic.apm.ServiceAggregationKey.agent_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.AgentName))

	}
	if _, ok := ignore["elastic.apm.ServiceAggregationKey.global_labels_str"]; !ok {
		_, _ = hasher.Write(protowire.AppendBytes(nil, m.GlobalLabelsStr))

	}
}

func elastic_apm_ServiceInstanceAggregationKey_hashpb_sum(m *ServiceInstanceAggregationKey, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.ServiceInstanceAggregationKey.global_labels_str"]; !ok {
		_, _ = hasher.Write(protowire.AppendBytes(nil, m.GlobalLabelsStr))

	}
}

func elastic_apm_ServiceInstanceMetrics_hashpb_sum(m *ServiceInstanceMetrics, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.ServiceInstanceMetrics.transaction_metrics"]; !ok {
		if len(m.TransactionMetrics) > 0 {
			for _, v := range m.TransactionMetrics {
				if v != nil {
					elastic_apm_KeyedTransactionMetrics_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["elastic.apm.ServiceInstanceMetrics.service_transaction_metrics"]; !ok {
		if len(m.ServiceTransactionMetrics) > 0 {
			for _, v := range m.ServiceTransactionMetrics {
				if v != nil {
					elastic_apm_KeyedServiceTransactionMetrics_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["elastic.apm.ServiceInstanceMetrics.span_metrics"]; !ok {
		if len(m.SpanMetrics) > 0 {
			for _, v := range m.SpanMetrics {
				if v != nil {
					elastic_apm_KeyedSpanMetrics_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
}

func elastic_apm_ServiceMetrics_hashpb_sum(m *ServiceMetrics, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.ServiceMetrics.service_instance_metrics"]; !ok {
		if len(m.ServiceInstanceMetrics) > 0 {
			for _, v := range m.ServiceInstanceMetrics {
				if v != nil {
					elastic_apm_KeyedServiceInstanceMetrics_hashpb_sum(v, hasher, ignore)
				}

			}
		}
	}
	if _, ok := ignore["elastic.apm.ServiceMetrics.overflow_groups"]; !ok {
		if m.OverflowGroups != nil {
			elastic_apm_Overflow_hashpb_sum(m.OverflowGroups, hasher, ignore)
		}

	}
}

func elastic_apm_ServiceTransactionAggregationKey_hashpb_sum(m *ServiceTransactionAggregationKey, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.ServiceTransactionAggregationKey.transaction_type"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.TransactionType))

	}
}

func elastic_apm_ServiceTransactionMetrics_hashpb_sum(m *ServiceTransactionMetrics, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.ServiceTransactionMetrics.histogram"]; !ok {
		if m.Histogram != nil {
			elastic_apm_HDRHistogram_hashpb_sum(m.Histogram, hasher, ignore)
		}

	}
	if _, ok := ignore["elastic.apm.ServiceTransactionMetrics.failure_count"]; !ok {
		_, _ = hasher.Write(protowire.AppendFixed64(nil, math.Float64bits(m.FailureCount)))

	}
	if _, ok := ignore["elastic.apm.ServiceTransactionMetrics.success_count"]; !ok {
		_, _ = hasher.Write(protowire.AppendFixed64(nil, math.Float64bits(m.SuccessCount)))

	}
}

func elastic_apm_SpanAggregationKey_hashpb_sum(m *SpanAggregationKey, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.SpanAggregationKey.span_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.SpanName))

	}
	if _, ok := ignore["elastic.apm.SpanAggregationKey.outcome"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Outcome))

	}
	if _, ok := ignore["elastic.apm.SpanAggregationKey.target_type"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.TargetType))

	}
	if _, ok := ignore["elastic.apm.SpanAggregationKey.target_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.TargetName))

	}
	if _, ok := ignore["elastic.apm.SpanAggregationKey.resource"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.Resource))

	}
}

func elastic_apm_SpanMetrics_hashpb_sum(m *SpanMetrics, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.SpanMetrics.count"]; !ok {
		_, _ = hasher.Write(protowire.AppendFixed64(nil, math.Float64bits(m.Count)))

	}
	if _, ok := ignore["elastic.apm.SpanMetrics.sum"]; !ok {
		_, _ = hasher.Write(protowire.AppendFixed64(nil, math.Float64bits(m.Sum)))

	}
}

func elastic_apm_TransactionAggregationKey_hashpb_sum(m *TransactionAggregationKey, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.trace_root"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, protowire.EncodeBool(m.TraceRoot)))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.container_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ContainerId))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.kubernetes_pod_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.KubernetesPodName))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.service_version"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ServiceVersion))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.service_node_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ServiceNodeName))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.service_runtime_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ServiceRuntimeName))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.service_runtime_version"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ServiceRuntimeVersion))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.service_language_version"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.ServiceLanguageVersion))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.host_hostname"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.HostHostname))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.host_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.HostName))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.host_os_platform"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.HostOsPlatform))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.event_outcome"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.EventOutcome))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.transaction_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.TransactionName))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.transaction_type"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.TransactionType))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.transaction_result"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.TransactionResult))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.faas_coldstart"]; !ok {
		_, _ = hasher.Write(protowire.AppendVarint(nil, uint64(m.FaasColdstart)))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.faas_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.FaasId))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.faas_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.FaasName))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.faas_version"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.FaasVersion))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.faas_trigger_type"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.FaasTriggerType))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.cloud_provider"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.CloudProvider))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.cloud_region"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.CloudRegion))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.cloud_availability_zone"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.CloudAvailabilityZone))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.cloud_service_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.CloudServiceName))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.cloud_account_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.CloudAccountId))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.cloud_account_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.CloudAccountName))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.cloud_machine_type"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.CloudMachineType))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.cloud_project_id"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.CloudProjectId))

	}
	if _, ok := ignore["elastic.apm.TransactionAggregationKey.cloud_project_name"]; !ok {
		_, _ = hasher.Write(protowire.AppendString(nil, m.CloudProjectName))

	}
}

func elastic_apm_TransactionMetrics_hashpb_sum(m *TransactionMetrics, hasher hash.Hash, ignore map[string]struct{}) {
	if _, ok := ignore["elastic.apm.TransactionMetrics.histogram"]; !ok {
		if m.Histogram != nil {
			elastic_apm_HDRHistogram_hashpb_sum(m.Histogram, hasher, ignore)
		}

	}
}
